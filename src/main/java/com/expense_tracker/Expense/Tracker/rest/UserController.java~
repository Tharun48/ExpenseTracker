package com.expense_tracker.Expense.Tracker.rest;

import com.expense_tracker.Expense.Tracker.model.*;
import com.expense_tracker.Expense.Tracker.service.User;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;

@RestController
public class UserController {

    User user;
    private ModelMapper modelMapper;
    PasswordEncoder passwordEncoder;

    @Autowired
    public UserController(User user, ModelMapper modelMapper, PasswordEncoder passwordEncoder) {
        this.user = user;
        this.modelMapper=modelMapper;
        this.passwordEncoder=passwordEncoder;
    }

    @PostMapping("/user")
    public ResponseEntity<UserResponseDTO> saveUser(@RequestBody UserRequestDTO userRequestDTO) {
        UserDetails userDetails = modelMapper.map(userRequestDTO, UserDetails.class);
        userDetails.setPassword(passwordEncoder.encode(userRequestDTO.password()));
        int userID = user.saveUser(userDetails);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }

    @PutMapping("/user")
    public ResponseEntity<UserResponseDTO> modifyUser(@RequestBody UserRequestDTO userRequestDTO) {
        UserDetails userDetails = modelMapper.map(userRequestDTO, UserDetails.class);
        int userID = user.modifyUserDetails(userDetails);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }

    @DeleteMapping("/user/{userId}")
    public ResponseEntity<UserResponseDTO> deleteUser(@PathVariable int userId) {
        int userID = user.deleteUser(userId);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<UserDetailsResponseDTO> getUser(@PathVariable int userId) {
        UserDetails userDetails =  user.getUser(userId);
        UserDetailsResponseDTO dto = new UserDetailsResponseDTO(
                userDetails.getUserId(),
                userDetails.getUserName(),
                userDetails.getFirstName(),
                userDetails.getLastName()
        );
        return ResponseEntity.ok(dto);
    }

    @GetMapping("/user/login")
    public ResponseEntity<JWTTokenDTO> loginUser() {
        //token can be generated by giving the email and password in the request using the provider manager bean
        return ResponseEntity.ok(new JWTTokenDTO("token"));
    }

    @PostMapping("/users/{userId}/savings/compare")
    public ResponseEntity<CompareMonthlySavingsDTO> compareMonthlySavings(
            @PathVariable int userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate firstMonthStart, // Format: YYYY-MM
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate firstMonthEnd,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate secondMonthStart, // Format: YYYY-MM
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate secondMonthEnd
    ) {
        CompareMonthlySavingsDTO compareMonthlySavingsDTO = user.comparingMonthlySavingsDTO(userId,firstMonthStart,firstMonthEnd,secondMonthStart,secondMonthEnd);
        return ResponseEntity.ok(compareMonthlySavingsDTO);
    }





}

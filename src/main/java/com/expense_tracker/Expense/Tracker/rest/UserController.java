package com.expense_tracker.Expense.Tracker.rest;

import com.expense_tracker.Expense.Tracker.model.*;
import com.expense_tracker.Expense.Tracker.securityconfig.ExpenseTrackerUserDetailsService;
import com.expense_tracker.Expense.Tracker.service.User;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.PostConstruct;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.*;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.util.Date;

@RestController
@Component
@Tag(name="user")
public class UserController {

    private final String key=ApplicationConstants.key;


    User user;
    private ModelMapper modelMapper;
    PasswordEncoder passwordEncoder;
    AuthenticationManager authenticationManager;
    @Autowired
    public UserController(User user, ModelMapper modelMapper, PasswordEncoder passwordEncoder,
                          AuthenticationManager authenticationManager) {
        this.user = user;
        this.modelMapper=modelMapper;
        this.passwordEncoder=passwordEncoder;
        this.authenticationManager=authenticationManager;
    }

    @PostMapping("/user/register")
    @Operation(
            summary = "Register a new user",
            description = "This api is used to register a new user"
    )
    public ResponseEntity<UserResponseDTO> saveUser(@RequestBody UserLoginDTO userLoginDTO) {
        UserDetails userDetails = modelMapper.map(userLoginDTO, UserDetails.class);
        userDetails.setPassword(passwordEncoder.encode(userLoginDTO.password()));
        int userID = user.saveUser(userDetails);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }

    @PutMapping("/user/register")
    @Operation(
            summary = "Modify the existing user",
            description = "This api is modify existing user",
            security = @SecurityRequirement(name = "BearerAuthentication")
    )
    public ResponseEntity<UserResponseDTO> modifyUser(@RequestBody UserRequestDTO userRequestDTO) {
        UserDetails userDetails = modelMapper.map(userRequestDTO, UserDetails.class);
        int userID = user.modifyUserDetails(userDetails);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }


    @DeleteMapping("/user/{userId}")
    @Operation(
        summary = "Delete the existing user",
        description = "This api is used to delete existing user",
        security = @SecurityRequirement(name = "BearerAuthentication")
    )
    public ResponseEntity<UserResponseDTO> deleteUser(@Parameter(description = "Id of user to get user details" ) @PathVariable int userId) {
        int userID = user.deleteUser(userId);
        return ResponseEntity.ok(new UserResponseDTO(userID));
    }

    @GetMapping("/user/{userId}")
    @Operation(
            summary = "Get user details",
            description = "This api is used to get user details",
            security = @SecurityRequirement(name = "BearerAuthentication")
    )
    public ResponseEntity<UserDetailsResponseDTO> getUser(@PathVariable int userId) {
        UserDetails userDetails =  user.getUser(userId);
        UserDetailsResponseDTO dto = new UserDetailsResponseDTO(
                userDetails.getUserId(),
                userDetails.getUserName(),
                userDetails.getFirstName(),
                userDetails.getLastName()
        );
        return ResponseEntity.ok(dto);
    }

    @PostMapping("/user/login")
    @Operation(
            summary = "Get the Bearer token",
            description = "This api is used to get the JWToken for authentication by providing the valid credentials"
    )
    public ResponseEntity<JWTTokenDTO> loginUser(@RequestBody JWTTokenRequestDTO jwtTokenRequestDTO) {
        //token can be generated by giving the email and password in the request using the provider manager bean
        String userName =jwtTokenRequestDTO.userName();
        String password =jwtTokenRequestDTO.password();
        Authentication authentication = UsernamePasswordAuthenticationToken.unauthenticated(userName, password);
        Authentication authenticated = authenticationManager.authenticate(authentication);
        String token="";
        if(authenticated.isAuthenticated()) {
            SecretKey secretKey= Keys.hmacShaKeyFor(key.getBytes(StandardCharsets.UTF_8));
            token = Jwts.builder()
                    .issuer("Expense tracker")
                    .subject("JWT Token for security")
                    .claim("username",userName)
                    .issuedAt(new Date())
                    .expiration(new Date(new Date().getTime()+6000000))
                    .signWith(secretKey).compact();
        }
        return ResponseEntity.status(HttpStatus.OK).header("token",token).body(new JWTTokenDTO(token));
    }

}

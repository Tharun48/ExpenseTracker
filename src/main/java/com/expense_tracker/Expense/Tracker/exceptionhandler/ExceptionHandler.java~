package com.expense_tracker.Expense.Tracker.exceptionhandler;

import com.expense_tracker.Expense.Tracker.model.ExceptionHandlerResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.boot.autoconfigure.batch.BatchTaskExecutor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class ExceptionHandler {

    @org.springframework.web.bind.annotation.ExceptionHandler
    public ResponseEntity<ExceptionHandlerResponse> exceptionHandler(IllegalArgumentException e) {
        ExceptionHandlerResponse exceptionHandlerResponse =  new ExceptionHandlerResponse();
        exceptionHandlerResponse.setStatus(HttpStatus.NOT_FOUND.value());
        exceptionHandlerResponse.setMessage(e.getMessage());
        exceptionHandlerResponse.setTimestamp(System.currentTimeMillis());
        return new ResponseEntity<>(exceptionHandlerResponse, HttpStatus.NOT_FOUND);
    }

    @org.springframework.web.bind.annotation.ExceptionHandler
    public ResponseEntity<ExceptionHandlerResponse> exceptionHandler(BadRequestException e) {
        ExceptionHandlerResponse exceptionHandlerResponse =  new ExceptionHandlerResponse();
        exceptionHandlerResponse.setStatus(HttpStatus.BAD_REQUEST.value());
        exceptionHandlerResponse.setMessage(e.getMessage());
        exceptionHandlerResponse.setTimestamp(System.currentTimeMillis());
        return new ResponseEntity<>(exceptionHandlerResponse, HttpStatus.BAD_REQUEST);
    }

    @org.springframework.web.bind.annotation.ExceptionHandler
    public ResponseEntity<?> handleException(HttpServletRequest request, Exception ex) {
        String path = request.getRequestURI();

        // Skip handling Swagger/OpenAPI requests
        if (path.startsWith("/v3/api-docs") || path.startsWith("/swagger-ui")) {
            throw new RuntimeException(ex); // rethrow so Spring can handle it
        }

        // Your custom error response
        Map<String, Object> error = new HashMap<>();
        error.put("message", ex.getMessage());
        error.put("timestamp", new Date());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }

}
